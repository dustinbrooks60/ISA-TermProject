{
  "swagger": "2.0",
  "info": {
    "description": "Upgraded Quiz API",
    "version": "UpdatedQuizAPI",
    "title": "Upgraded Quiz API for COMP4537 Term Project",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/COMP4537-TermProject/documentation/UpdatedQuizAPI",
  "tags": [
    {
      "name": "admins",
      "description": "Secured Admin-only calls"
    },
    {
      "name": "students",
      "description": "Operations available to students"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/quizzes": {
      "get": {
        "tags": [
          "students and admins"
        ],
        "summary": "retrieves all quizzes",
        "description": "Retrieves all the quizzes in the database.",
        "operationId": "getQuizzes and retrieveAllQuizzes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "all quizzes in the DB -- regardless of ID",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/quiz"
              }
            }
          },
          "400": {
            "description": "bad SQL query"
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "adds a new quiz to the database",
        "description": "Add a new quiz to the database",
        "operationId": "createQuiz",
        "consumes": [
          "string"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "quizName",
            "description": "name of the quiz to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "new quiz created"
          },
          "400": {
            "description": "invalid input, quiz not created"
          }
        }
      }
    },
    "/choices": {
      "get": {
        "tags": [
          "students and admins"
        ],
        "summary": "retrieves all quizzes",
        "description": "Retrieves all choices for a quiz based on the quiz ID given",
        "operationId": "getQuizzes and getAllQuizzes",
        "produces": [
          "string"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "all choices for a specific quiz",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "bad SQL query"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "tags": [
          "students and admins"
        ],
        "summary": "retrieves all quizzes",
        "description": "Retrieves all of the questions and choices depending on the ID",
        "operationId": "students/getQuizzes and admin/getAllQuizzes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "quiz question",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/question"
              }
            }
          },
          "400": {
            "description": "bad SQL query"
          }
        }
      },
      "put": {
        "tags": [
          "admins"
        ],
        "summary": "updates a question",
        "description": "Updates a question in the DB",
        "operationId": "updateQuestion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "question",
            "description": "question object to update the old question with",
            "required": false,
            "schema": {
              "$ref": "#/definitions/question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "quiz question updated correctly",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "bad SQL query"
          }
        }
      },
      "delete": {
        "tags": [
          "admins"
        ],
        "summary": "deletes a question",
        "description": "Deletes a question from the DB",
        "operationId": "deleteQuestion",
        "parameters": [
          {
            "in": "body",
            "name": "question",
            "description": "question object reference to delete the old question",
            "required": false,
            "schema": {
              "$ref": "#/definitions/question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "quiz question deleted from DB",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "bad SQL query"
          }
        }
      }
    }
  },
  "definitions": {
    "quiz": {
      "type": "object",
      "required": [
        "name",
        "quizId"
      ],
      "properties": {
        "quizId": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "JavaScript Quiz"
        }
      }
    },
    "question": {
      "type": "object",
      "required": [
        "answer",
        "choices",
        "questionBody",
        "questionId"
      ],
      "properties": {
        "questionId": {
          "type": "integer",
          "example": 1
        },
        "questionBody": {
          "type": "string",
          "example": "This is a question?"
        },
        "choices": {
          "type": "object",
          "properties": {}
        },
        "answer": {
          "type": "string",
          "example": "A"
        }
      }
    },
    "choice": {
      "type": "object",
      "required": [
        "choice",
        "choiceBody",
        "choiceId"
      ],
      "properties": {
        "choiceId": {
          "type": "integer",
          "example": 1
        },
        "choice": {
          "type": "string",
          "example": "A"
        },
        "choiceBody": {
          "type": "string",
          "example": "<script> tag is the answer"
        }
      }
    }
  }
}